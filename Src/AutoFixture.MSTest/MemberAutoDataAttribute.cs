using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Reflection;
using AutoFixture.MSTest.DataSources;

namespace AutoFixture.MSTest
{
    /// <summary>
    /// Provides a data source for a data theory, with the data coming from one of the following sources
    /// and combined with auto-generated data specimens generated by AutoFixture:
    /// 1. A static property
    /// 2. A static field
    /// 3. A static method (with parameters)
    /// The member must return something compatible with IEnumerable&lt;object[]&gt; with the test data.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    [SuppressMessage("Microsoft.Performance", "CA1813:AvoidUnsealedAttributes",
        Justification = "This attribute is the root of a potential attribute hierarchy.")]
    public class MemberAutoDataAttribute : BaseAutoDataAttribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="memberName">The name of the data source member.</param>
        /// <param name="arguments">
        /// The collection of arguments passed during member invocation, when the data source member is a method.
        /// </param>
        public MemberAutoDataAttribute(string memberName, object[]? arguments = null)
            : this(() => new Fixture(), null, memberName, arguments)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="type">The declaring type of the data source member.</param>
        /// <param name="memberName">The name of the data source member.</param>
        /// <param name="arguments">
        /// The collection of arguments passed during member invocation, when the data source member is a method.
        /// </param>
        public MemberAutoDataAttribute(Type type, string memberName, object[]? arguments)
            : this(() => new Fixture(), type, memberName, arguments)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MemberAutoDataAttribute"/> class.
        /// </summary>
        /// <param name="fixtureFactory">The factory initializing a new <see cref="IFixture"/> instance.</param>
        /// <param name="type">The declaring type of the data source member.</param>
        /// <param name="memberName">The name of the data source member.</param>
        /// <param name="arguments">
        /// The collection of arguments passed during member invocation, when the data source member is a method.
        /// </param>
        /// <exception cref="ArgumentNullException">Thrown when the member name is null.</exception>
        /// <exception cref="ArgumentException">Thrown when the member name is empty.</exception>
        protected MemberAutoDataAttribute(Func<IFixture> fixtureFactory, Type? type, string memberName, object[]? arguments)
            : base(fixtureFactory)
        {
            if (memberName is null)
                throw new ArgumentNullException(nameof(memberName));

            if (string.IsNullOrWhiteSpace(memberName))
                throw new ArgumentException("Argument cannot be empty.", nameof(memberName));

            this.Type = type;
            this.MemberName = memberName;
            this.Arguments = arguments ?? EmptyArray<object>.Value;
        }

        /// <summary>
        /// Gets the declaring type of the data source member.
        /// When value is null the declaring type is assumed to be same as test class.
        /// </summary>
        public Type? Type { get; }

        /// <summary>
        /// Gets the name of the data source member.
        /// </summary>
        public string MemberName { get; }

        /// <summary>
        /// Gets the arguments provided to the member.
        /// Should be empty when the member is a field, property, or does not require arguments.
        /// </summary>
        public object[] Arguments { get; }

        /// <inheritdoc />
        public override IEnumerable<object[]> GetData(MethodInfo methodInfo)
        {
            var declaringType = this.Type ?? methodInfo.DeclaringType;
            if (declaringType is null)
                throw new ArgumentException("Test method missing declaring type information.", nameof(methodInfo));

            var member = declaringType.GetMember(this.MemberName).Single();
            var memberSource = this.CreateMemberSource(member, this.Arguments);

            return this.CreateAutoSource(this.FixtureFactory, memberSource)
                .GetTestCases(methodInfo).Select(x => x.ToArray());
        }

        /// <summary>
        /// Creates a member test case source instance.
        /// </summary>
        /// <param name="member">The source member info.</param>
        /// <param name="arguments">The arguments to be passed to the member.</param>
        /// <returns>A <see cref="ITestCaseSource" /> instance.</returns>
        protected virtual ITestCaseSource CreateMemberSource(MemberInfo member, object[]? arguments)
        {
            return new MemberSource(member, arguments);
        }
    }
}